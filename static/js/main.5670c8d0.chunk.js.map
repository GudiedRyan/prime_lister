{"version":3,"sources":["primeFactor.js","primeLister.js","bestPrimeFactor.js","App.js","serviceWorker.js","index.js"],"names":["Factor","props","handleChange","event","setState","target","name","value","factorMe","n","state","input","factors","generateFactors","m","i","factorlist","push","console","log","onChange","this","placeholder","onClick","map","factor","j","key","className","React","Component","PrimeLister","list","showPrime","last","p","primechildren","primes","prime","PrimeFactorer","updateText","primeFactorization","primeFactors","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5670c8d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Factor extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            factors: [],\r\n            n: \"\"\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>Factors</h4>\r\n                <p>Let <em>n</em> be an integer. An integer <em>a</em> is a factor of <em>n</em> if there exists an integer <em>b</em> such\r\n                that <em>n</em> = <em>ab</em>. A proper factor of <em>n</em> is a factor that is neither 1 nor <em>n</em>.\r\n                </p>\r\n                <input onChange={this.handleChange} name=\"input\" placeholder=\"n\" value={this.input}></input>\r\n                <button onClick={this.factorMe}>Factor</button>\r\n                <p>Factors:</p>\r\n                <ul>\r\n                    {this.state.factors.map((factor,j) =>\r\n                    <li key={j} className=\"input\">\r\n                        {factor}\r\n                    </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    factorMe = () => {\r\n        this.setState({\r\n            n: this.state.input,\r\n            factors: []\r\n        })\r\n        this.generateFactors();\r\n    }\r\n    generateFactors = () => {\r\n        let m = this.state.input;\r\n        let i = 1;\r\n        let factorlist = [];\r\n        while (i <= m) {\r\n            if (m % i === 0) {\r\n                factorlist.push(i);\r\n                i++;\r\n            } else {\r\n                i++;\r\n            }\r\n            console.log(factorlist);\r\n        }\r\n        this.setState(state => ({\r\n            factors: factorlist\r\n        }))\r\n    }\r\n}\r\n\r\nexport default Factor;","import React from 'react';\r\n\r\nclass PrimeLister extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            showPrime: false,\r\n            last: \"\",\r\n            primes: []\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>Prime Lister</h4>\r\n                <p>Enter any positive integer greater than 1 to get a list of primes less than that integer!</p>\r\n                <input name=\"input\" placeholder=\"Some positive integer\" onChange={this.handleChange} value={this.state.input}></input>\r\n                <button onClick={this.list}>Calculate</button>\r\n                <div>\r\n                    {this.state.showPrime? <div>\r\n                        <p>Input = {this.state.last}</p>\r\n                        <ul className=\"input\">\r\n                            {this.state.primes.map((prime,i) =>\r\n                            <li key={i}>\r\n                                {prime}\r\n                            </li>\r\n                            )}\r\n                        </ul>\r\n                        </div> : <p></p>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    list = () => {\r\n        this.setState(state => ({\r\n            showPrime: true,\r\n            last: state.input\r\n        }))\r\n        let n = this.state.input;\r\n        let p = 2;\r\n        let primechildren = [];\r\n        while (p < n) {\r\n            let j = 1;\r\n            let factors = 0;\r\n            while (j < p) {\r\n                if (p % j === 0) {\r\n                    factors++;\r\n                    j++;\r\n                } else {\r\n                    j++;\r\n                }\r\n            }\r\n            if (factors === 1) {\r\n                primechildren.push(p);\r\n                p++;\r\n            } else {\r\n                p++;\r\n            }\r\n            }\r\n        this.setState(state => ({\r\n            primes: primechildren\r\n        }))\r\n    }\r\n}\r\n\r\nexport default PrimeLister;","import React from 'react';\r\n\r\nclass PrimeFactorer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            last: \"\",\r\n            primeFactors: []\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>Prime Factorization!</h4>\r\n                <p>Ever wondered what primes compose your favorite number?\r\n                    Ever wondered if your favorite number <em>was</em> a prime?\r\n                    Wonder no more, simply type it in, then click the factor button\r\n                    and you'll know!\r\n                </p>\r\n                <input name=\"input\" placeholder=\"Some positive integer\" onChange={this.updateText} value={this.state.input}></input>\r\n                <button onClick={this.primeFactorization}>Factor</button>\r\n                <div>\r\n                    <p>Input = {this.state.last}</p>\r\n                    <ul className=\"input\">\r\n                        {this.state.primeFactors.map((prime,p) =>\r\n                        <li key={p}>\r\n                            {prime}\r\n                        </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    updateText = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    primeFactorization = () => {\r\n        this.setState(state => ({\r\n            last: state.input,\r\n            primeFactors: []\r\n        }))\r\n        let factors = [];\r\n        let n = this.state.input;\r\n        let i = 2;\r\n        while (i <= n) {\r\n        if (n % i === 0){\r\n            factors.push(i);\r\n            n = n/i;\r\n        } else {\r\n            i++;\r\n            }\r\n        }\r\n        this.setState(state => ({\r\n            input: \"\",\r\n            primeFactors: factors\r\n        }))\r\n    }\r\n}\r\n\r\nexport default PrimeFactorer;","import React from 'react';\nimport './App.css';\nimport Factor from './primeFactor';\nimport PrimeLister from './primeLister';\nimport PrimeFactorer from './bestPrimeFactor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Primes</h1>\n      A prime <em>p</em> is a positive integer that has only two divisors, 1 and <em>p</em>.\n      The <strong>Fundamental Theorem of Arithmetic</strong> states that every positive integer greater than 2 is either prime, or can be\n      written as a unique product of primes.\n      <br />\n      <p>Since primes are such interesting numbers, I have put a few functions of this page that will allow you to play with primes.\n        The first function on this page takes any integer and returns the factors. The second function takes any integer and tells you\n        what unique combination of primes make that integer. The third function takes any integer and returns all primes that are less\n        than that integer.\n      </p>\n      <br />\n      <p><strong>NOTE:</strong> While computing power has vastly increased in the past several years, large numbers are \n      difficult to factor quickly. This does not mean you cannot put large numbers into these functions,\n      however, it is ill advised to go larger than 100,000. You are free to do so, but expect lag or potentially a crash.\n      While the inability to quickly factor large numbers is unfortunately for mathematicians, it is a boon for Internet encryption.\n      </p>\n      <br/>\n        <Factor />\n        <PrimeFactorer />\n        <PrimeLister />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}